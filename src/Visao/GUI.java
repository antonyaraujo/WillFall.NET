/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Visao;

import Controlador.Sistema;
import Modelo.Observer;
import Modelo.Vertice;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;


/**
 *
 * @author antony
 */
public class GUI extends javax.swing.JFrame implements Observer{
    private GrafoGUI painel;
    private ArrayList<Observer> observers;
    private int numeroEquipamentos;
    /**
     * Creates new form GUI
     * @throws java.io.IOException
     */
    
    public GUI() throws IOException {  
        Toolkit kit = Toolkit.getDefaultToolkit();  
        Dimension tamTela = kit.getScreenSize();  
        initComponents();
        pack();   
        setSize(tamTela.width, tamTela.height-35);
        painel = new GrafoGUI();
        getContentPane().add(painel);    
        numeroEquipamentos = Sistema.getGrafo().getNumVertices();
       
        painel.setSize(getWidth()-20, getHeight()-60);        
        this.setLocationRelativeTo(null);
        estadoBotoes(false);
        estadoBotaoConexao(false);
        observers = new ArrayList();    
        Sistema.getGrafo().registerObserver(this);
        //if(JOptionPane.showConfirmDialog(null, "Deseja inicializar aplicação com a topologia padrão?") == JOptionPane.YES_OPTION){
            //Sistema.carregarArquivo(new File("padrao.txt"));
            //estadoBotaoConexao(true);
            //estadoBotoes(true);
        //}
            
    }
  
    /**
     * Metodo que muda o estado (ativado/desativado) dos itens do menu que só podem funcionar a partir de 30 vertices
     * @param estado - variavel booleana com o novo estado dos itens de menu
     */
    private void estadoBotoes(boolean estado){
        distanciaEuclidianaMenuItem.setEnabled(estado);
        caminhosMenosCustososMenuItem.setEnabled(estado);
        menorRotaMenuItem.setEnabled(estado);
    }
    
    /**
     * Metodo que muda o estado (ativado/desativado) dos item de menu para adicionarConexao
     * @param estado - variavel booleana com o novo estado do item de menu
     */
    private void estadoBotaoConexao(boolean estado)
    {
        adicionarConexaoMenuItem.setEnabled(estado);
    }
            
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        barraMenu = new javax.swing.JMenuBar();
        arquivo = new javax.swing.JMenu();
        carregarArquivo = new javax.swing.JMenuItem();
        salvarArquivo = new javax.swing.JMenuItem();
        visualizar = new javax.swing.JMenu();
        exibirPesos = new javax.swing.JCheckBoxMenuItem();
        menorRotaMenuItem = new javax.swing.JMenuItem();
        distanciaEuclidianaMenuItem = new javax.swing.JMenuItem();
        caminhosMenosCustososMenuItem = new javax.swing.JMenuItem();
        redeMenu = new javax.swing.JMenu();
        adicionarEquipamentoMenuItem = new javax.swing.JMenuItem();
        removerEquipamentoMenuItem = new javax.swing.JMenuItem();
        adicionarConexaoMenuItem = new javax.swing.JMenuItem();
        resetarRedeMenuItem = new javax.swing.JMenuItem();
        sobre = new javax.swing.JMenu();
        detalhes = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("WillFall.NET");
        setResizable(false);

        arquivo.setText("Arquivo");

        carregarArquivo.setText("Carregar Arquivo");
        carregarArquivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carregarArquivoActionPerformed(evt);
            }
        });
        arquivo.add(carregarArquivo);

        salvarArquivo.setText("Salvar Arquivo");
        salvarArquivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarArquivoActionPerformed(evt);
            }
        });
        arquivo.add(salvarArquivo);

        barraMenu.add(arquivo);

        visualizar.setText("Visualizar");

        exibirPesos.setSelected(true);
        exibirPesos.setText("Exibir pesos");
        exibirPesos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exibirPesosActionPerformed(evt);
            }
        });
        visualizar.add(exibirPesos);

        menorRotaMenuItem.setText("Menor Rota");
        menorRotaMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menorRotaMenuItemActionPerformed(evt);
            }
        });
        visualizar.add(menorRotaMenuItem);

        distanciaEuclidianaMenuItem.setText("Distância Euclidiana");
        distanciaEuclidianaMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distanciaEuclidianaMenuItemActionPerformed(evt);
            }
        });
        visualizar.add(distanciaEuclidianaMenuItem);

        caminhosMenosCustososMenuItem.setText("Caminhos Menos Custosos");
        caminhosMenosCustososMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                caminhosMenosCustososMenuItemActionPerformed(evt);
            }
        });
        visualizar.add(caminhosMenosCustososMenuItem);

        barraMenu.add(visualizar);

        redeMenu.setText("Rede");

        adicionarEquipamentoMenuItem.setText("Adicionar Equipamento");
        adicionarEquipamentoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionarEquipamentoMenuItemActionPerformed(evt);
            }
        });
        redeMenu.add(adicionarEquipamentoMenuItem);

        removerEquipamentoMenuItem.setText("Remover Equipamento");
        removerEquipamentoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerEquipamentoMenuItemActionPerformed(evt);
            }
        });
        redeMenu.add(removerEquipamentoMenuItem);

        adicionarConexaoMenuItem.setText("Adicionar Conexão");
        adicionarConexaoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionarConexaoMenuItemActionPerformed(evt);
            }
        });
        redeMenu.add(adicionarConexaoMenuItem);

        resetarRedeMenuItem.setText("Resetar Rede");
        resetarRedeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetarRedeMenuItemActionPerformed(evt);
            }
        });
        redeMenu.add(resetarRedeMenuItem);

        barraMenu.add(redeMenu);

        sobre.setText("Sobre");

        detalhes.setText("Detalhes");
        detalhes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detalhesActionPerformed(evt);
            }
        });
        sobre.add(detalhes);

        barraMenu.add(sobre);

        setJMenuBar(barraMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 635, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 608, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents


    /**
     * Metodo que carrega um arquivo de configuracao de topologia a partir de um item de Menu
     * @param evt - Evento que aciona o item de menu para chamar este método
     */
    private void carregarArquivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carregarArquivoActionPerformed
        JFileChooser fc = new JFileChooser();
        try 
        {
            if(fc.showOpenDialog(this)!= fc.APPROVE_OPTION)
                return;
            Sistema.carregarArquivo(fc.getSelectedFile());
        } 
        catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Erro desconhecido!");
            return;
        }
        painel.repaint();
    }//GEN-LAST:event_carregarArquivoActionPerformed

    /**
     * Metodo que salva um novo arquivo contendo a configuracao topologica do grafo
     * @param evt - Evento que aciona o item de menu para chamar este metodo
     */
    private void salvarArquivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarArquivoActionPerformed
        JFileChooser fc = new JFileChooser();        
        fc.setDialogTitle("Exportar Arquivo de Configuração");                
        fc.showDialog(this, "Salvar");        
        try {
                Sistema.salvarArquivo(fc.getSelectedFile().getPath());
        } 
        catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } 
        catch(NullPointerException e){
            return;
        }
        painel.repaint();        
    }//GEN-LAST:event_salvarArquivoActionPerformed

    /**
     * Metodo que verifica se o item de Menu exibirPesos esta ativado ou desativado
     * e a partir disso esconde ou mostra os pesos das conexoes do grafo
     * @param evt 
     */
    private void exibirPesosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exibirPesosActionPerformed
        if(!exibirPesos.isSelected())
            painel.setExibirPeso(false);
        if (exibirPesos.isSelected())
            painel.setExibirPeso(true);
        painel.repaint();
    }//GEN-LAST:event_exibirPesosActionPerformed

    /**
     * Exibe detalhes do desenvolvimento do programa
     * @param evt 
     */
    private void detalhesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detalhesActionPerformed
        JFrame detalhes = new JFrame("Sobre - WillFall.NET");
        JLabel info = new JLabel();
        detalhes.setSize(200, 250);
        info.setFont(new Font("default", Font.ROMAN_BASELINE, 12));
        info.setText("<html> \n"
                + "\n"
                + "	<center><h1><font color='#27408B'>WillFall.NET </font></h1>\n"
                + "	<p>Versão Beta: 25<br>\n"
                + "        Finalizado em: 22 Mar de 2020</p></center><br>\n"
                + "\n"                 
                + "<div style='text-indent: 5%;'><b>Desenvolvido por</b> Antony Araújo e Anderson Lima <br></div>\n"
                + "<div style='text-indent: 5%;'><b>Disciplina: </b> MI - Programação<br></div>\n"
                + "<div style='text-indent: 5%;'><b>Tutor:</b> Carlos Rodrigues <br><br></p></div><br>\n"
                + "<center><div style='padding-left: 20px; margin-left: 10px; text-align:justify; width: 200px; heigth: 50px;display: flex; flex-direction: row; justify-content: center; align-items: center;'>WillFall.NET é um software desenvolvido para simulação e representação visual da rede de computadores da empresa WillFall NET LTDA. Permitindo a simulação das conexões entre seus diferentes equipamentos através de tipos abstratos de dados (como grafo) e cálculo de melhor caminho, através do algoritmo de dijkstra.</div></center><br>"
                + "<i><center>Para maiores dúvidas contactar: <a href='malito:antonyaraujo@protonmail.com'>antonyaraujo@protonmail.com</a> ou </center></i></font>");
        info.setSize(200, 250);
        info.setVisible(true);
        detalhes.add(info);
        
        detalhes.pack();
        detalhes.setVisible(true);
        detalhes.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        detalhes.setLocationRelativeTo(null);
        detalhes.pack();
    }//GEN-LAST:event_detalhesActionPerformed

    /**
     * Metodo que dado dois equipamento os adiciona no grafo e na tela
     * @param eq1 - vertice que representa a origem
     * @param eq2  - vertice que representa o destino
     */
    private void adicionarConexao(Vertice eq1, Vertice eq2)
    {
        boolean ok;
        int peso = 0;
        do {
            try {
                peso = (Integer.parseInt(JOptionPane.showInputDialog(null, "Digite o peso da conexão", null)));
                ok = true;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Digite um valor de peso válido");
                ok = false;
            }
        } while (!ok);

        int opcao = JOptionPane.showConfirmDialog(null, "A conexão deve ser bidirecional?", "Bidirecionalidade", JOptionPane.YES_NO_OPTION);
        if (opcao == JOptionPane.NO_OPTION) {
            Sistema.adicionarAresta(eq1, eq2, peso);
            painel.repaint();
            /*if(!eq1.isTerminal() && eq2.getArestas().size() - 1 ==0)
            {
                Vertice eq3 = Sistema.getGrafo().buscarVertice(JOptionPane.showInputDialog(null, "Informe um equipamento para encaminhar pacotes de dados para o equipamento "
                        + eq1, "Equipamento", 1).toUpperCase());
                
                adicionarConexao(eq3, eq1);
            }
                
            if(!eq1.isTerminal() && eq2.getArestas().size() - 1 ==0)
            {
                Vertice eq4 = Sistema.getGrafo().buscarVertice(JOptionPane.showInputDialog(null, "Informe um equipamento para o roteador " + eq2 + " encaminhar os pacotes de dados", "Equipamento", 1).toUpperCase());
                adicionarConexao(eq2, eq4);
            }*/
        }
        if (opcao == JOptionPane.YES_OPTION) {
            Sistema.adicionarAresta(eq1, eq2, peso);
            Sistema.adicionarAresta(eq2, eq1, peso);
            painel.repaint();
            /* if(!eq2.isTerminal() && eq2.getArestas().size() - 2 ==0)
            {
                Vertice eq3 = Sistema.getGrafo().buscarVertice(JOptionPane.showInputDialog(null, "Informe um equipamento para o roteador " + eq2 + " encaminhar os pacotes de dados", "Equipamento", 1).toUpperCase());
                adicionarConexao(eq2, eq3);
            }*/
        }
    }
    private void adicionarConexaoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionarConexaoMenuItemActionPerformed
        Vertice v1 = null, v2 = null;
        try 
        {
            do 
            {
                v1 = Sistema.getGrafo().buscarVertice(JOptionPane.showInputDialog(null, "Digite o rótulo do primeiro equipamento", "Rótulo", 1).toUpperCase());
                if (v1 == null) {
                    JOptionPane.showMessageDialog(null, "Equipamento não existente, tente novamente");
                }
            }   
            while (v1 == null);
            do {
                v2 = Sistema.getGrafo().buscarVertice(JOptionPane.showInputDialog(null, "Digite o rótulo do segundo equipamento", "Rótulo", 1).toUpperCase());
                if (v2 == null) { 
                    JOptionPane.showMessageDialog(null, "Equipamento não existente, tente novamente");
                }
                }
            while (v2 == null);
        } 
        catch (NullPointerException e) 
        {
            return;
        }
        adicionarConexao(v1, v2);
        painel.repaint();
    }//GEN-LAST:event_adicionarConexaoMenuItemActionPerformed

    private void adicionarEquipamentoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionarEquipamentoMenuItemActionPerformed
        Object[] opcoes = {"Roteador", "Computador"};   
            painel.adicionarEquipamentoMouse(JOptionPane.showInputDialog(null, "Selecione qual equipamento deseja adicionar", "Adicionar Equipamento", JOptionPane.QUESTION_MESSAGE, null, opcoes, opcoes[0]));        
    }//GEN-LAST:event_adicionarEquipamentoMenuItemActionPerformed

    private void removerEquipamentoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerEquipamentoMenuItemActionPerformed
        String nome = JOptionPane.showInputDialog("Informe o nome do componente a ser removido").toUpperCase();                          
        if(Sistema.removerVertice(nome))
            JOptionPane.showMessageDialog(null, nome + " foi removido com sucesso!", "Remoção", 1);  
        else 
        {
            JOptionPane.showMessageDialog(null, "Equipamento não encontrado!", "Remoção", 1);
            return;
        }
        painel.removeAll();
        painel.repaint();
    }//GEN-LAST:event_removerEquipamentoMenuItemActionPerformed

    /**
     * Metodo que remove todos os elementos do grafo e da tela
     * @param evt 
     */
    private void resetarRedeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetarRedeMenuItemActionPerformed
        Sistema.resetarRede();       
        painel.removeAll();
        painel.validate();
        painel.repaint(); 
    }//GEN-LAST:event_resetarRedeMenuItemActionPerformed

    private void menorRotaMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menorRotaMenuItemActionPerformed
        String origem = JOptionPane.showInputDialog("Digite o rótulo do terminal de partida").toUpperCase();
        try 
        {
            if(!Sistema.getGrafo().buscarVertice(origem).isTerminal()) 
            {
            JOptionPane.showMessageDialog(null, "Esse equipamento não é um terminal!");
            return;
            } 
        }
        catch(NullPointerException e)
        {
            JOptionPane.showMessageDialog(null, "Equipamento " + origem + " não encontrado!");
            return;
        }
        String destino = JOptionPane.showInputDialog("Digite o rótulo do terminal de destino").toUpperCase();
        try 
        {
            if(!Sistema.getGrafo().buscarVertice(destino).isTerminal())
            {
            JOptionPane.showMessageDialog(null, "Esse equipamento não é um terminal!");
            }
        } 
        catch (NullPointerException e) 
        {
            JOptionPane.showMessageDialog(null, "Equipamento " + destino + " não encontrado!");
            return;
        }
        painel.setMenorRotaVertices(Sistema.menorRotaEntre(origem, destino));
        painel.setDestacarRota(true);
        painel.repaint();
        JOptionPane.showMessageDialog(null, "A menor rota entre " + origem + "e " + destino + " está destacada no grafo"
                + "\nRota: "+Sistema.menorRotaEntre(origem, destino)+"\nPressione OK para não destacar mais a rota");
        painel.repaint();
    }//GEN-LAST:event_menorRotaMenuItemActionPerformed

    private void distanciaEuclidianaMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distanciaEuclidianaMenuItemActionPerformed
        String equipamento1 = JOptionPane.showInputDialog("Informe o nome do equipamento A").toUpperCase();
         // Verifica se o equipamento 1 existe
        Vertice v1 = Sistema.getGrafo().buscarVertice(equipamento1);
        if (v1 == null) JOptionPane.showMessageDialog(null, "Não existe equipamento com o nome de " + equipamento1);
        String equipamento2 = JOptionPane.showInputDialog("Informe o nome do equipamento B").toUpperCase();
         // Verifica se o equipamento 2 existe
        Vertice v2 = Sistema.getGrafo().buscarVertice(equipamento2);
        if (v2 == null) JOptionPane.showMessageDialog(null, "Não existe equipamento com o nome de " + equipamento2);
        
        double valor = Sistema.calcularCoordenadasEuclidianas(equipamento1, equipamento2);
        
        if(valor != -1) JOptionPane.showMessageDialog(null, "A distância euclidiana entre " + 
                equipamento1 + " e " + equipamento2 + " é: \n" + String.format("%.5f", valor));
    }//GEN-LAST:event_distanciaEuclidianaMenuItemActionPerformed

    private void caminhosMenosCustososMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_caminhosMenosCustososMenuItemActionPerformed
        String computador = JOptionPane.showInputDialog(null, "Informe o nome do nó").toUpperCase();
        JScrollPane barraRolagem = Sistema.identificarMelhorCaminho(computador);
        JFrame exibir = new JFrame("Caminhos menos custosos do " + computador);
        exibir.add(barraRolagem);                
        exibir.setSize(600, 200);
        exibir.setVisible(true);        
        exibir.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        exibir.setLocationRelativeTo(null);
    }//GEN-LAST:event_caminhosMenosCustososMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        String so = "";
        so = System.getProperty("os.name");
        so = so.replaceAll("10", "").strip();
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if (so.equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new GUI().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem adicionarConexaoMenuItem;
    private javax.swing.JMenuItem adicionarEquipamentoMenuItem;
    private javax.swing.JMenu arquivo;
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JMenuItem caminhosMenosCustososMenuItem;
    private javax.swing.JMenuItem carregarArquivo;
    private javax.swing.JMenuItem detalhes;
    private javax.swing.JMenuItem distanciaEuclidianaMenuItem;
    private javax.swing.JCheckBoxMenuItem exibirPesos;
    private javax.swing.JMenuItem menorRotaMenuItem;
    private javax.swing.JMenu redeMenu;
    private javax.swing.JMenuItem removerEquipamentoMenuItem;
    private javax.swing.JMenuItem resetarRedeMenuItem;
    private javax.swing.JMenuItem salvarArquivo;
    private javax.swing.JMenu sobre;
    private javax.swing.JMenu visualizar;
    // End of variables declaration//GEN-END:variables

    /**
     * Muda a diponibilidade do uso de alguns botões de acorodo com o novo 
     * numero de equipamentos.
     * @param numEquipamentos - Numero de vertices do grafo.
     */
    @Override
    public void update(Object numEquipamentos) {
        numeroEquipamentos = (Integer) numEquipamentos;
        if(numeroEquipamentos >=2) 
            estadoBotaoConexao(true);
        else
            estadoBotaoConexao(false);
        if (numeroEquipamentos >=30)
            estadoBotoes(true);
        else
            estadoBotoes(false);
    }
    
    

}
